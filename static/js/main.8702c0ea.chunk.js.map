{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","text","startValue","query","status","all","filterReducer","value","active","completed","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","changeUserId","dispatch","changeTodo","todoId","foundTodo","find","id","undefined","CurrentTodoActions","className","map","classNames","title","onClick","userId","TodoFilter","handleChange","handleReset","setFilterAll","filterActions","onChange","event","target","placeholder","style","pointerEvents","Loader","TodoModal","selectedUser","loadUser","resetUser","useEffect","href","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","App","useState","user","setUser","selectedUserId","setSelectedUserId","visibleTodos","setQuery","getTodos","a","todosFromServer","todosActions","useMemo","toLocaleLowerCase","includes","toLowerCase","trim","userFromServer","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8702c0ea.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype QueryAction = {\n  type: 'filter/QUERY',\n  payload: string,\n};\n\ntype FilterActiveAction = { type: 'filter/ACTIVE' };\n\ntype FilterComletedAction = { type: 'filter/COMPLETED' };\n\ntype FilterAllAction = { type: 'filter/ALL' };\n\ntype Action = QueryAction\n| FilterActiveAction\n| FilterComletedAction\n| FilterAllAction;\n\nconst filterQuery = (text: string): QueryAction => (\n  { type: 'filter/QUERY', payload: text }\n);\nconst filterActive = (): FilterActiveAction => (\n  { type: 'filter/ACTIVE' }\n);\nconst filterCompleted = (): FilterComletedAction => (\n  { type: 'filter/COMPLETED' }\n);\nconst filterAll = (): FilterAllAction => (\n  { type: 'filter/ALL' }\n);\n\nexport const actions = {\n  filterActive,\n  filterCompleted,\n  filterAll,\n  filterQuery,\n};\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst startValue: State = {\n  query: '',\n  status: Status.all,\n};\n\nconst filterReducer = (\n  value = startValue,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return {\n        ...value,\n        query: action.payload,\n      };\n\n    case 'filter/ACTIVE':\n      return {\n        ...value,\n        status: Status.active,\n      };\n\n    case 'filter/COMPLETED':\n      return {\n        ...value,\n        status: Status.completed,\n      };\n\n    case 'filter/ALL':\n      return {\n        ...value,\n        status: Status.all,\n      };\n\n    default:\n      return {\n        query: '',\n        status: Status.all,\n      };\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodosAction = {\n  type: 'todos/ADD',\n  payload: Todo[],\n};\n\ntype ClearTodosAction = {\n  type: 'todos/CLEAR',\n};\n\ntype Action = AddTodosAction\n| ClearTodosAction;\n\ntype State = Todo[];\n\nconst add = (todos: Todo[]): AddTodosAction => (\n  { type: 'todos/ADD', payload: todos }\n);\nconst clear = (): ClearTodosAction => ({ type: 'todos/CLEAR' });\n\nconst todosReducer = (\n  value: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n\n    case 'todos/CLEAR':\n      return [];\n\n    default:\n      return value;\n  }\n};\n\nexport const actions = { add, clear };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as CurrentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[];\n  changeUserId(todoId: number | null): void,\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    changeUserId,\n  },\n) => {\n  const dispatch = useDispatch();\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const setCurrentTodo = (\n    value: Todo,\n  ) => dispatch(CurrentTodoActions.setTodo(value));\n\n  const changeTodo = (todoId: number) => {\n    const foundTodo = todos.find(todo => todo.id === todoId);\n\n    if (foundTodo !== undefined) {\n      setCurrentTodo(foundTodo);\n    }\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        <>\n          {todos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              className={classNames(\n                { 'has-background-info-light': currentTodo?.id === todo.id },\n              )}\n              key={todo.title}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  { 'has-text-success': todo.completed },\n                  { 'has-text-danger': !todo.completed },\n                )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    changeTodo(todo.id);\n                    changeUserId(todo.userId);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={classNames('far', {\n                        'fa-eye-slash': currentTodo?.id === todo.id,\n                        'fa-eye': currentTodo?.id !== todo.id,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </>\n\n      </tbody>\n    </table>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  query: string,\n  filter: Status,\n  handleChange(event: ChangeEvent<HTMLInputElement>): void,\n  handleReset(): void,\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    query,\n    filter,\n    handleChange,\n    handleReset,\n  },\n) => {\n  const dispatch = useDispatch();\n  const setFilterActive = () => dispatch(filterActions.filterActive());\n  const setFilterCompleted = () => dispatch(filterActions.filterCompleted());\n  const setFilterAll = () => dispatch(filterActions.filterAll());\n\n  const handleFilterChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    switch (event.target.value) {\n      case Status.active:\n        return setFilterActive();\n\n      case Status.completed:\n        return setFilterCompleted();\n\n      case Status.all:\n        return setFilterAll();\n\n      default:\n        return setFilterAll();\n    }\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter}\n            onChange={handleFilterChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query !== '' && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleReset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\n\nimport { actions as CurrentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  selectedUser: User | null,\n  changeUserId(todoId: number | null): void,\n  loadUser(): void,\n  resetUser(): void,\n};\n\nexport const TodoModal: React.FC<Props> = (\n  {\n    selectedUser,\n    changeUserId,\n    loadUser,\n    resetUser,\n  },\n) => {\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const clearCurrentTodo = () => dispatch(CurrentTodoActions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                clearCurrentTodo();\n                changeUserId(null);\n                resetUser();\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, {\n  ChangeEvent,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { actions as todosActions } from './features/todos';\nimport { actions as filterActions } from './features/filter';\n\nimport { useAppSelector } from './app/hooks';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\nimport { Status } from './types/Status';\nimport * as api from './api';\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const [user, setUser] = useState<User | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  let visibleTodos = todos;\n\n  const addTodos = (value: Todo[]) => dispatch(todosActions.add(value));\n  const setQuery = (text: string) => dispatch(filterActions.filterQuery(text));\n  const getTodos = async () => {\n    const todosFromServer = await api.getTodos();\n\n    addTodos(todosFromServer);\n  };\n\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  useEffect(() => {\n    if (query[0] === ' ') {\n      setQuery('');\n    }\n  }, [query]);\n\n  useMemo(() => {\n    if (status === Status.active) {\n      visibleTodos = todos.filter(\n        (todo: Todo) => todo.completed === false,\n      );\n    }\n\n    if (status === Status.completed) {\n      visibleTodos = todos.filter(\n        (todo: Todo) => todo.completed === true,\n      );\n    }\n\n    visibleTodos = visibleTodos.filter(\n      (todo: Todo) => todo.title.toLocaleLowerCase().includes(query.toLowerCase().trim()),\n    );\n  }, [status, query]);\n\n  const loadUser = async () => {\n    if (selectedUserId !== null) {\n      // eslint-disable-next-line\n      const userFromServer = await api.getUser(selectedUserId);\n\n      setUser(userFromServer);\n    }\n  };\n\n  const handleChangeQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    return setQuery(event.target.value);\n  };\n\n  const handleQueryReset = () => {\n    return setQuery('');\n  };\n\n  const changeUserId = (userId: number | null) => {\n    setSelectedUserId(userId);\n  };\n\n  const resetUser = () => {\n    setUser(null);\n  };\n\n  return (\n    <div className=\"section\">\n      <div className=\"container\">\n        <div className=\"box\">\n          <h1 className=\"title\">Todos:</h1>\n\n          <div className=\"block\">\n            <TodoFilter\n              query={query}\n              filter={status}\n              handleChange={handleChangeQuery}\n              handleReset={handleQueryReset}\n            />\n          </div>\n\n          <div className=\"block\">\n            {todos.length ? (\n              <TodoList\n                todos={visibleTodos}\n                changeUserId={changeUserId}\n              />\n            ) : (\n              <Loader />\n            )}\n          </div>\n        </div>\n        {selectedUserId && (\n          <TodoModal\n            selectedUser={user}\n            changeUserId={changeUserId}\n            loadUser={loadUser}\n            resetUser={resetUser}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}